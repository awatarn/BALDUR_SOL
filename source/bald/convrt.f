c--------1---------2---------3---------4---------5---------6---------7-c
c@convrt  .../baldur/code/bald/convrt.f
c  rgb 07-aug-01 implemented vnneo1(js,jb) together with vxemps(js,jb)
c  rgb 17-jun-01 added veltis, veltes, velnhs, and velnis convection
c  rgb 30-may-96 set ihe3=ihe4=lalpha=0 unless mimp.gt.0,...
c  rgb 14-jul-94 multiplied velthi by uisl / uist for proper units
c  rgb 29-jan-94 added convective velocities velthi from sbrtn theory
c  rgb 14-oct-93 add contributions from diffusivity matrix difthi
c    computed in sbrtn theory to zphi, zpsi, zmu, and znu
c    (moved here temporarily from sbrtn trcoef)
c  rgb 08-feb-93 completed off diagonal terms in zpsi, zphi, zmu, znu
c    zxexte -> -znu(lelec,js),  zxixti -> -znu(lion,js)
c  rgb 05-feb-93 changed zphi(lion)=0.0 to zphi(lion)=dites(jb)
c  les nov-90  add d3he
c  les nov-90  remove ware pinch from protons when cfutz(490) > 0
c  les nov-90  include particle source from d3he fusion reactants
c  rgb 06-may-90 18.33 fill arrays condei(jb), cvctei(jb), condii(jb),..
c      diagnostics for conduction, convection and total power flow
c     cpvelc and cpvion now used directly, may be set to zero
c     (cpvelc and cpvion are now defaulted to 1.5)
c  rgb 02-may-90 18.31 initialization section carried out each call
c      changed zx1 to zpvelc, zx2 to zpvion, cleaned up style
c  dps 15-may-89 15.09 keep weirs out of dddd when IRE code is used
c  dps 16-dec-87 fix two bugs having to do with cfutz(365) (ware pinch)
c       just before 216 continue, just before do 246, just after do 370
c       and add to off-diagonal aaaa(lelec,js), bbbb(lelec,js);
c       matching 1-D BALDUR.
c  rgb 11-mar-87 changed zpvelc=cpvelc*2/3 to zpvelc=cpvelc*2./3.
c       rgb 14-nov-86 subtract dV'/dt/V' from cccc(j1,j1,jb)
c                     to simplify the transport equations
c                     as constructed in sbrtn reduce
c       drm 13-dec-84 try to recover old treatment of ion energy
c       flow with ware pinch
cdoc
c=======================================================================
c       ------------
c       sbrtn CONVRT   file DSOLVER
c       ------------
c
c      2.15    convrt trancport coefficients to a, b, c, and d
c
c
c      common blocks and variables modified:
c
c       aaaa, bbbb, cccc, dddd, etai (comcoe)
c
c-----------------------------------------------------------------------
c
c
c       the coefficients generated by trcoef are for the following equations:
c
c       density equations:
c
c       d(rhohs(ih,2,jb))/dt = div (flux hyd. ih) + source terms
c               - sink terms - recoms(ih,j)*rhohs(ih,2,jb)
c       d(rhois(ii,2,jb))/dt = div (flux imp. ii) + source terms - sink terms
c
c       energy equations:
c
c       d(elec. energy dens.)/dt = div [ detes(jb)* grad te +
c               3/2 k*te* total electron flux +
c               - veltes(jb) * k * T_e
c               denes(jb)* grad elec. dens. + detis(jb)* grad ti  ]
c               + ohmic heating term + source terms - sink terms
c               - cnueqs(jb)*k*(te - ti)
c       d(ion energy dens.)/dt = div { ditis(jb)* grad ti + dites(jb)* grad te
c               + sum over ih2 [ dinhs(ih2,jb)* grad dens hyd. ih2 ]
c               + sum over ii2 [ dinis(ii2,jb)* grad dens imp. ii2 ]
c               - veltis(jb) * k * T_i
c               + 3/2 k*ti* total ion flux }
c               + source terms - sink terms
c               + cnueqs(jb)*k*(te - ti)
c
c       where k is boltzmann's constant (te and ti are in units in which
c               k is 1), ih and ih2 are hydrogen indices, ii and ii2 are
c               impurity species indices.
c       source and sink term variables for hydrogen begin with "sh",
c       for electron energy density, with "we", for ion energy density,
c       with "wi".  at present there are no impurity source or sink terms.
c       jb is the zone or boundary index.
c
c       fluxes are:
c
c       flux of hydrogen ih =  dnhs(ih,jb)* grad hyd. dens ih
c               + dahs(ih,jb)* grad te + dbhs(ih,jb)* grad ti
c               - velnhs(ih,jz) * hy. dens ih
c               + sum over ih2 { dnhhs(ih,ih2,jb)*rhohs(ih2,1,jb)*
c                       grad hyd. dens ih }
c               + sum over ii { dnhis(ih,ii,jb) *
c                       [ c2mean(ii,1,jb)*rhois(ii,1,jb)* grad hyd. dens ih
c                       - rhohs(ih,1,jb)* grad (mean z imp ii * dens imp ii) ]
c                       + dbhis(ih,ii,jb)*rhohs(ih,1,jb)*rhois(ii,1,jb)
c                               * grad ti }
c       flux of impurity ii = dnis(ii,jb)* grad imp. dens ii
c               + dais(ii,jb)* grad te + dbis(ii,jb)* grad ti
c               - velnis(ii,jz) * imp. dens ii
c               - sum over ih { dnihs(ii,ih,jb)*
c                       [ cmean(ii,1,jb)*rhois(ii,1,jb)* grad hyd. dens ih
c                       - rhohs(ih,1,jb)* grad imp. dens ii ]
c                       + dbihs(ii,ih,jb)*rhohs(ih,1,jb)*rhois(ii,1,jb)
c                               * grad ti }
c               + sum over ii2 { dniis(ii,ii2,jb)*
c                       [ c2mean(ii2,1,jb)*rhois(ii2,1,jb)* grad imp. dens. ii
c                       - rhois(ii,1,jb)*cmean(ii,1,jb)*
c                               grad (mean z imp. ii2 * dens imp. ii2) ]
c                       + dbiis(ii,ii2,jb)*rhois(ii,1,jb)*rhois(ii2,1,jb)
c                               * grad ti }
c
c
c
c       these equations have to be converted into equations of the form
c
c       dchi(j1)/dt =  sum over j2 { div
c               [ aaaa(j1,j2) * (chi(j2) at r-(dr/2))
c               + bbbb(j1,j2) * (chi(j2) at r+(dr/2)) ]
c               + cccc(j1,j2) * chi(j2) }  + dddd(j1)
c
c       gradients are always calculated using chi averaged (according to the
c       value of thetai) between the old and new timestep.
c       all other instances of the basic parameters are
c       evaluated at the old timestep., except in the cnueqs terms,
c       where  te = 2/3 electron energy density / electron density
c       here, the electron energy density is time centered, but
c       the electron density is evaluated at the old timestep.
c       the ti term is treated analogously.
cend
cinput
c=======================================================================
c       --------------------------------
c       Input variables for sbrtn CONVRT
c       -------------------------------- (file DSOLVER)
c
c  cfutz(incflx=110) activates hirshman-hawryluk neoclassical ion-
c       ion interactions.  arguments of cfutz-factors which adjust
c       levels of the included regimes are:  "iclflx" for the classi-
c       cal regime, "ibpflx" for the banana-plateau, and "ipsflx" for
c       the pfirsch-schluter regime.  numbers for these constants are
c       set in subroutine ncflux:
c            incflx,iclflx,ibpflx,ipsflx /110,111,112,113/
c       when hirshman-hawryluk contributions to the particle fluxes are
c       being included (i.e., cfutz(incflx) .gt. 0.0), the transport
c       coefficients having to do with a less-accurate approximation
c       of ion-ion interactions are set to zero in subroutine trcoef:
c       set to zero are dnhis(ih,ii,j), dnihs(ii,ih,j), dnhhs(ih,ih2,j),
c       dniis(ii,ii2,j), as well as dbhis(ih,ii,j), dbihs(ii,ih,j), and
c       dbiis(ii,ii2,j).
c
c
c       the option is available near the boundary for an enhanced out-
c       flow of impurity ions accompanying any rapid outflow of hydro-
c       genic ions:
c        cfutz(i0drag)=proportionality factor (and on-off switch) for
c                      enhanced drag on impurities attributable to
c                      fluxes of hydrogenic ions.  defaulted to 0.0,
c                      namely to "off".
c        cfutz(i1drag)=switch, which if set to zero (default is 0.0),
c                      makes the drag proportional to the flux-veloc-
c                      ity difference between hydrogenic and impurity
c                      ions.  if not zero, the drag is proportional
c                      solely to the hydrogenic flux velocity.
c        cfutz(i2drag)=parameter specifying the outer fraction of the
c                      plasma or separatrix radius, r(sepx), which is
c                      subject to enhanced drag.  defaulted to 0.20
c                      which means that only impurity ions outside of
c                      0.80*r(sepx) can experience this effect.
c        cfutz(iprint)=time (secs) immediately after which the average
c                      hydrogenic flux-velocity (hyd vel) is printed
c                      out vs increasing radial index as well as en-
c                      hanced drag, if any, on impurity #1 (im1 drag)
c                      and on impurity #2 (im2 drag).  the process re-
c                      peats itself until 3 successive time steps have
c                      been displayed.  default is 0.0, and the print-
c                      out is by-passed if cfutz(i0drag)=0.0.
cend
c
c-----------------------------------------------------------------------
c
        subroutine convrt
c
c
       include 'cparm.m'
       include 'cbaldr.m'
       include 'commhd.m'
       include 'cbparm.m'
c
        logical         inita1       ,  lprint
c
        dimension
     1zmu(idxchi,idxchi)   ,znu(idxchi,idxchi)   ,zphi(idxchi)         ,
     2zpsi(idxchi)         ,zxi(idxchi,idxchi)       ,
     3zdrhoh(2)            ,zdrhoi(idximp)       ,zdc2im(idximp)       ,
     4za(idxion)           ,zb(idxion)           ,zhydv0(55)           ,
     5zxdrag(idximp,55)    ,zzzz(idxion,55)
c
c
c
cbate        equivalence
cbate     x   (nlzzzz(1),zhydv0(1))       , (nlzzzz(56),zxdrag(1,1))
c
        data    inita1 /.true./
        data    ifbias,incflx,ieware,lprint /81,110,365,.false./
        data    iprint,i0drag,i1drag,i2drag /214,217,218,219/
        data    ifrac /327/
c
c
        data    iclass /2/,     isub /15/
c
c-----------------------------------------------------------------------
c
        if (.not.nlomt2(isub)) go to 10
        call mesage(' *** 2.15 subroutine convrt bypassed')
        return
   10   continue
c
c
        inita1=.false.
        mchim1=lion-1
        ix1=mxions*mxions*55
        ix2=mxchi
        ix3=mxchi*mxchi
        ztprnt=0.0
        if(abs(cfutz(iprint)).gt.epslon)
     .  ztprnt=abs(cfutz(iprint))*ueit
        nxprnt=0
        call resetr(zdrhoh,mxhyd,0.0)
        call resetr(zdrhoi,mximp,0.0)
        call resetr(zdc2im,mximp,0.0)
c
c     introduction of adjustment factors ("cpvelc" and "cpvion") with
c     respect to electron flux and ion flux, and which express the de-
c     gree of constant pressure vs. constant volume flow (set in name-
c     list/nurun1/.
c
cbate        zpvelc=1.0
cbate        zpvion=1.0
cbate        if(cpvelc.gt.epslon) zpvelc=cpvelc*2./3.
cbate        if(cpvion.gt.epslon) zpvion=cpvion*2./3.
c
c
c     set up he-3 and he-4 indices
c
c   les nov-90 skip if d3he fusion
c
        ihe3=0
        ihe4=0
        lalpha = 0
      if ( mimp.gt.0 .and. cfutz(490) .le. epslon ) then
        do 96 ji=1,mimp
          if(nimp(ji).eq.-4) ihe3=ji+lhydn
          if(nimp(ji).eq. 2) ihe4=ji+lhydn
   96   continue
        if(ihe4.gt.0)      lalpha=ihe4
      endif
c
c
c      1)      set zone 1 values
c
c
        do 104 jh = 1, mhyd
          azzz(jh,1) = 1.0
          zzzz(jh,1) = 1.0
  104   continue
c
        if (mimp.le.0) go to 110
c
        do 108 ji = 1, mimp
          i001 = ji + lhydn
          azzz(i001,1) = cmean(ji,2,1)
          zzzz(i001,1) = cmean(ji,1,1)
  108   continue
c
  110   continue
c
c  call subroutine ncflux if hawryluk-hirshman ion
c    transport is active
c
        if(cfutz(incflx).gt.epslon) call ncflux
c
c  print-out check when enhanced impurity drag is active
c
        if(abs(cfutz(i0drag)).le.epslon) go to 2030
          zt=0.5*(tai+tbi)
        if(zt.lt.ztprnt) go to 2030
          lprint=.true.
          nxprnt=nxprnt+1
        if(nxprnt.lt.4) go to 2030
          lprint=.false.
          ztprnt=epsinv
 2030   continue
c
        if(.not.lprint) go to 2042
          zhydv0(1)=0.0
        do 2044 ii=1,mximp
        do 2044 jx=1,mxzone
          zxdrag(ii,jx)=0.0
 2044   continue
 2042   continue
c
c      2) - 9) main loop
c
c
        do 999 jb = lcentr, mzones
c
c
c      2)      calculate zmu, znu, zxi, zphi, zpsi
c
c       these matrices (and vectors) are coefficients in the following
c               equations:
c
c       - flux(jp) = sum over js  [ zmu(jp,js) grad dens(js)
c                       + znu(jp,js) grad [ z*dens(js) ]
c                       + zxi(jp,js) dens(js)
c                       + zphi(jp) grad ( 3 ne te / 2 )
c                       + zpsi(jp) grad ( 3 ni ti / 2 ) ]
c
c  compute gradients (modified by Bateman 7-apr-85)
c
c  zdr = <|del xi|**2> / ( uisl * <|del xi|> * dxboui(jb) )
c        at timestep N+1/2  boundary jb  1/length in standard units
c        zdr is used to compute gradients which will subsequently
c        be operated upon by a divergence and flux surface averaged
c  < div D del f > = (1/V') (d/dxi) [ V' <|del xi|> zdr (f(jb+1) - f(jb)) ]
c
      zdr = avi(jb,6,1) / ( uisl * avi(jb,5,1) * dxboui(jb) )
c
cend bateman 7-apr-85
c
c  temperature gradients
c
        zdte = zdr*(tes(2,jb)*tes(2,jb)-tes(2,jb-1)*tes(2,jb-1))/
     &           (tes(2,jb)+tes(2,jb-1)+epslon)
        zdti = zdr*(tis(2,jb)*tis(2,jb)-tis(2,jb-1)*tis(2,jb-1))/
     &           (tis(2,jb)+tis(2,jb-1)+epslon)
c
c  density gradients
c
        do 202 jh=1,mhyd
          zdrhoh(jh) = zdr*(rhohs(jh,2,jb)*rhohs(jh,2,jb)-
     &                   rhohs(jh,2,jb-1)*rhohs(jh,2,jb-1))/
     &                  (rhohs(jh,2,jb)+rhohs(jh,2,jb-1)+epslon)
  202   continue
c
      if (mimp.le.0) go to 206
c
        do 204 ji=1,mimp
          zdrhoi(ji) = zdr*(rhois(ji,2,jb)*rhois(ji,2,jb)-
     &                   rhois(ji,2,jb-1)*rhois(ji,2,jb-1))/
     &                   (rhois(ji,2,jb)+rhois(ji,2,jb-1)+epslon)
          zm=cmean(ji,2,jb)*rhois(ji,2,jb)
          zn=cmean(ji,2,jb-1)*rhois(ji,2,jb-1)
          zdc2im(ji)=zdr*(zm*zm-zn*zn)/(zm+zn+epslon)
  204   continue
c
  206 continue
c
c..zero out contributions to particle and temperature fluxes
c
        call resetr(zmu,ix3,0.0)
        call resetr(znu,ix3,0.0)
        call resetr(zxi,ix3,0.0)
        call resetr(zphi,ix2,0.0)
        call resetr(zpsi,ix2,0.0)
c
c
c      2.1)    hydrogen equations
c
c
c
        do 218 jh = 1, mhyd
c
          zjhjh = dnhs(jh,jb)
          zxjhjh = -vxemps(jh,jb) - vnneo1(jh,jb)
          azzz(jh,jb) = 1.0
          zzzz(jh,jb) = 1.0
c
        do 212 jh2 = 1, mhyd
          zjhjh=zjhjh+dnhhs(jh,jh2,jb)*rhohs(jh2,1,jb)
          zxjhjh=zxjhjh+dnhhs(jh,jh2,jb)*zdrhoh(jh2)
  212   continue
c
      if (mimp.le.0) go to 216
c
        do 214 ji = 1, mimp
          ii = ji + lhydn
          zjhjh  = zjhjh+dnhis(jh,ji,jb)*c2mean(ji,1,jb)*rhois(ji,1,jb)
          zxjhjh = zxjhjh+dnhis(jh,ji,jb)*zdc2im(ji)-
     &               dbhis(jh,ji,jb)*zdti*rhois(ji,1,jb)
  214   continue
c
  216   continue
c
        zmu(jh,jh) = zjhjh
        zphi(jh)   = dahs(jh,jb)
        zpsi(jh)   = dbhs(jh,jb)
        zxi(jh,jh) = - zxjhjh
c
c  start making contributions to electron and ion transport.
c
        zxi(lelec,lelec)=zmu(jh,jh)*zdrhoh(jh)+zxi(jh,jh)*rhohs(jh,1,jb)
     &                  + zphi(jh)*zdte+zpsi(jh)*zdti+zxi(lelec,lelec)
        zxi(lion,lion)=zmu(jh,jh)*zdrhoh(jh)+zxi(jh,jh)*rhohs(jh,1,jb)
     &                  + zphi(jh)*zdte+zpsi(jh)*zdti+zxi(lion,lion)
c
c  remove the ware pinch contribution to zxi(lion,lion) and
c    zxi(lelec,lelec) if cfutz(ieware) .gt. epslon
c
        if (cfutz(ieware).gt.epslon) zxi(lelec,lelec)=
     &        zxi(lelec,lelec) - vnwars(jb)*rhohs(jh,1,jb)
     &                         - vnneo1(jh,jb) * rhohs(jh,1,jb)
        if(cfutz(ieware).gt.epslon) zxi(lion,lion)=
     &        zxi(lion,lion)   - vnwars(jb)*rhohs(jh,1,jb)
     &                         - vnneo1(jh,jb) * rhohs(jh,1,jb)
c
  218   continue
c
c
c
c
c      2.2)    impurity equations
c
c
c
c
      if (mimp.le.0) go to 240
c
        do 238 ji = 1, mimp
          ii = ji + lhydn
          zjiji = dnis(ji,jb)
          zxjiji = -vxemps(ii,jb) - vnneo1(ii,jb)
          azzz(ii,jb) = cmean(ji,2,jb)
          zzzz(ii,jb) = cmean(ji,1,jb)
c
          do 226 jh = 1, mhyd
            zjiji=zjiji+dnihs(ji,jh,jb)*rhohs(jh,1,jb)
            zxjiji=zxjiji+dnihs(ji,jh,jb)*cmean(ji,1,jb)*zdrhoh(jh)+
     &        dbihs(ji,jh,jb)*zdti*rhohs(jh,1,jb)
  226     continue
c
        do 234 ji2 = 1, mimp
        zjiji=zjiji+dniis(ji,ji2,jb)*c2mean(ji2,1,jb)*rhois(ji2,1,jb)
        zxjiji=zxjiji+dniis(ji,ji2,jb)*cmean(ji,1,jb)*zdc2im(ji2)-
     &         dbiis(ji,ji2,jb)*zdti*rhois(ji2,1,jb)
  234   continue
c
        zmu(ii,ii) = zjiji
        zphi(ii)   = dais(ji,jb)
        zpsi(ii)   = dbis(ji,jb)
        zxi(ii,ii) = - zxjiji
c
c  make more contributions to electron and ion=energy transport.
c
        zxi(lelec,lelec)=cmean(ji,1,jb)*(zmu(ii,ii)*zdrhoi(ji)+
     &    zxi(ii,ii)*rhois(ji,1,jb)+zphi(ii)*zdte+zpsi(ii)*zdti)+
     &    zxi(lelec,lelec)
        zxi(lion,lion)=zmu(ii,ii)*zdrhoi(ji)+zxi(ii,ii)*rhois(ji,1,jb)+
     &    zphi(ii)*zdte+zpsi(ii)*zdti+zxi(lion,lion)
c
  238   continue
c
c   les nov-90  remove ware pinch from protons
c
      if (cfutz(490).gt.epslon .and. cfutz(ieware).gt.epslon) then
        ii = lprotn-lhydn
        zxi(lelec,lelec)
     &    = zxi(lelec,lelec) - vnwars(jb)*rhois(lprotn-lhydn,1,jb)
     &               - vnneo1(ii,jb) * rhois(lprotn-lhydn,1,jb)
        zxi(lion,lion)
     &    = zxi(lion,lion) - vnwars(jb)*rhois(lprotn-lhydn,1,jb)
     &               - vnneo1(ii,jb) * rhois(lprotn-lhydn,1,jb)
      endif
c
  240   continue
c
c
c
c      2.3)    temperature equations
c
c
c
c  common factors
c
        zine=1.0/rhoels(1,jb)
        zini=1.0/rhoins(1,jb)
        ze=zine*tes(1,jb)
        ze0=gamin1*zine
        zi=zini*tis(1,jb)
        zi0=gamin1*zini
c
c  conductivities (e.g., (3/2)*xe and (3/2)*xi)
c
        zphi(lelec) = ze0*detes(jb)
        zpsi(lelec) = zi0*detis(jb)
        zphi(lion)  = ze0*dites(jb)
        zpsi(lion)  = zi0*(ditis(jb)+ditins(jb))
c
cbate        zxexte=ze*detes(jb)
cbate        zxixti=zi*ditis(jb)
c
c  contributions from hydrogen-ion fluxes
c
c
cbate        if(cfutz(ieware).gt.epslon) zxi(lelec,lelec)=0.0
c   where this zeroing is in preparation of restoring the older
c   way of introducing effects of ware pinch on electron energy.
c
        do 246 jh=1,mhyd
          zmu(lelec,jh) = - zi * detis(jb)
          znu(lelec,jh) = denes(jb) - ze * detes(jb)
          zxi(lelec,jh) = vewars(jb)*tes(1,jb)
c
c   where "vewars(jb)" is zero unless it is desired to use the
c   older approximation (prior to 19-may-83) for the effects of
c   ware-pinch on the electron-energy flow.  to restore the old
c   version set "cfutz(ieware) > epslon", where "ieware=365".
c
          zmu(lion,jh)  = - ze * dites(jb)
          znu(lion,jh)  = dinhs(jh,jb) - zi * ditis(jb)
  246   continue
c
      if (mimp.le.0) go to 254
c
c   contributions from impurity-ion fluxes
c
        do 252 ji=1,mimp
          ii=ji+lhydn
          zmu(lelec,ii) = - zi * detis(jb)
          znu(lelec,ii) = denes(jb) - ze * detes(jb)
          zmu(lion,ii)  = dinis(ji,jb) - zi * ditis(jb)
          znu(lion,ii)  = - ze * dites(jb)
  252   continue
c
  254 continue
c
c
c..contributions from the diffusivity matrix computed in sbrtn theory
c
      if ( ltheor ) then
c
        znorm = uisl**2
c
        zne = max ( rhoels(1,jb), epslon )
        zni = max ( rhoins(1,jb), epslon )
        zte = max ( tes(1,jb), epslon )
        zti = max ( tis(1,jb), epslon )
c
        znh = 0.0
        do jh=1,mhyd
          znh = znh + rhohs(jh,1,jb)
        enddo
        znh = max ( znh, epslon )
c
        znz = 0.0
        if ( mimp .gt. 0 ) then
          do ji=1,mimp
            znz = znz + rhois(ji,1,jb)
          enddo
        endif
        znz = max ( znz , epslon )
c
c..ion energy equation
c
        zpsi(lion) = zpsi(lion) + znorm * difthi(1,1,jb)
        zphi(lion) = zphi(lion)
     &    + znorm * difthi(1,3,jb) * zni * zti / ( zne * zte )
        do jh=1,mhyd
          zmu(lion,jh) = zmu(lion,jh)
     &      + znorm * 1.5 * zti * ( difthi(1,2,jb) * zni / znh
     &      - difthi(1,1,jb) - difthi(1,3,jb) * zni / zne )
        enddo
        if ( mimp .gt. 0 ) then
          do ji=1,mimp
            ii = ji + lhydn
            zmu(lion,ii) = zmu(lion,ii)
     &        + znorm * 1.5 * zti * ( difthi(1,4,jb) * zni / znz
     &        - difthi(1,1,jb) )
            znu(lion,ii) = znu(lion,ii)
     &        - znorm * 1.5 * zti * difthi(1,3,jb) * zni / zne
          enddo
        endif
c
c..electron energy equation
c
        zpsi(lelec) = zpsi(lelec)
     &    + znorm * difthi(3,1,jb) * zne * zte / ( zni * zti )
        zphi(lelec) = zphi(lelec) + znorm * difthi(3,3,jb)
        do jh=1,mhyd
          zmu(lelec,jh) = zmu(lelec,jh)
     &      + znorm * 1.5 * zte * ( difthi(3,2,jb) * zne / znh
     &      - difthi(3,3,jb) - difthi(3,1,jb) * zne / zni )
        enddo
        if ( mimp .gt. 0 ) then
          do ji=1,mimp
            ii = ji + lhydn
            zmu(lelec,ii) = zmu(lelec,ii)
     &        + znorm * 1.5 * zte * ( difthi(3,4,jb) * zne / znz
     &        - difthi(3,1,jb) * zne / zni )
            znu(lelec,ii) = znu(lelec,ii)
     &        - znorm * 1.5 * zte * difthi(3,3,jb)
          enddo
        endif
c
c..hydrogen density equations
c
        do jh=1,mhyd
          zpsi(jh) = zpsi(jh)
     &      + znorm * difthi(2,1,jb) * 2.0 * znh / ( 3.0 * zni * zti )
          zphi(jh) = zphi(jh)
     &      + znorm * difthi(2,3,jb) * 2.0 * znh / ( 3.0 * zne * zte )
          do j2=1,mhyd
            zmu(jh,j2) = zmu(jh,j2)
     &        + znorm * ( difthi(2,2,jb) - difthi(2,1,jb) * znh / zni
     &        - difthi(2,3,jb) * znh / zne )
          enddo
          if ( mimp .gt. 0 ) then
            do ji=1,mimp
              ii = ji + lhydn
              zmu(jh,ii) = zmu(jh,ii) + znorm * 
     &          znh * ( difthi(2,4,jb) / znz - difthi(2,1,jb) / zni )
              znu(jh,ii) = znu(jh,ii)
     &          - znorm * difthi(2,3,jb) * znh / zne
            enddo
          endif
        enddo
c
c..impurity density equations
c
        if ( mimp .gt. 0 ) then
          do ji=1,mimp
            ii = ji + lhydn
            zpsi(ii) = zpsi(ii) + znorm 
     &        * difthi(4,1,jb) * 2.0 * znz / ( 3.0 * zni * zti )
            zphi(ii) = zphi(ii) + znorm 
     &        * difthi(4,3,jb) * 2.0 * znz / ( 3.0 * zne * zte )
            do j2=1,mhyd
              zmu(ii,j2) = zmu(ii,j2)
     &          + znorm * znz * ( difthi(4,2,jb) / znh
     &          - difthi(4,1,jb) / zni - difthi(4,3,jb) / zne )
            enddo
            do j2=1,mimp
              i2 = j2 + lhydn
              zmu(ii,i2) = zmu(ii,i2) + znorm
     &          * ( difthi(4,4,jb) - difthi(4,1,jb) * znz / zni )
              znu(ii,i2) = znu(ii,i2)
     &          - znorm * difthi(4,3,jb) * znz / zne
            enddo
          enddo
        endif
c
      endif
c
c end of contributions from diffusivity matrix computed in sbrtn theory
c
c
c     2.4)   hawryluk-hirshman neoclassical ion transport
c
      if(cfutz(incflx).le.epslon) go to 270
c
        ipmax=limpn
        if(mimp.le.0) ipmax=mhyd
c
c  re-indexing certain quantities
c
        do 260 ip=1,ipmax
          if(ip.gt.mhyd) then
            ii=ip-lhydn
            za(ip)=1./(rhois(ii,1,jb)+epslon)
            zb(ip)=zdrhoi(ii)
          else
            za(ip)=1./(rhohs(ip,1,jb)+epslon)
            zb(ip)=zdrhoh(ip)
            endif
  260   continue
c
c       re-grouping of terms
c
        zs1=0.0
        zs2=0.0
        zs4=0.0
        zs5=0.0
        zdlnti=zdti/(tis(1,jb)+epslon)
c
        do 264 ip1=1,ipmax
          zs3=0.0
          do 262 ip2=1,ipmax
            z1=cl11(ip1,ip2,jb)+bp11(ip1,ip2,jb)+ps11(ip1,ip2,jb)
            z2=cl12(ip1,ip2,jb)+bp12(ip1,ip2,jb)+ps12(ip1,ip2,jb)
            z3=z1*za(ip2)
            zs1=zs1+z3*zb(ip2)
            zs4=zs4+zzzz(ip1,jb)*z3*zb(ip2)
            zs3=zs3+z1+z2
            zmu(ip1,ip2)=zmu(ip1,ip2)-z3
  262     continue
          zs2=zs2+zs3*zdlnti
          zs5=zs5+zzzz(ip1,jb)*zs3*zdlnti
          zxi(ip1,ip1)=zxi(ip1,ip1)-zs3*za(ip1)*zdlnti
  264   continue
c
        zxi(lelec,lelec)=-zs4-zs5+zxi(lelec,lelec)
        zxi(lion,lion)=zxi(lion,lion)-zs1-zs2
c
  270   continue
c
c
c     2.5)   optional enhancement in the normal flow of impurity ions
c
        if(abs(cfutz(i0drag)).le.epslon) go to 2060
        if(mimp.le.0)                    go to 2060
c
c  initializations
c
        zrmins=rmins
        zrmajs=rmajs
c
        if(abs(cfutz(i0drag)).le.epslon) cfutz(i0drag)=0.0
        if(abs(cfutz(i1drag)).le.epslon) cfutz(i1drag)=0.0
        if(    cfutz(i2drag) .le.epslon) cfutz(i2drag)=0.2
        if(    cfutz(i2drag) .gt.1.0   ) cfutz(i2drag)=1.0
        if(    cfutz(iprint) .le.epslon) cfutz(iprint)=0.0
c
        jsepx=mzones
        if(nadump(1).gt.lcentr) jsepx=nadump(1)
        x0drag=xbouni(jsepx)*(1.0-cfutz(i2drag))
        ztprnt=cfutz(iprint)*ueit
        nxprnt=0
c
c  end of initializaions
c
        if(lprint) zhydv0(jb)=0.0
        if(xbouni(jb).lt.x0drag) go to 2060
c
c       equivalent flux velocities for various ion species
c
          z0=0.0
          z1=0.0
        do 2040 ih=1,mhyd
          z0=-zphi(ih)*zdte-zpsi(ih)*zdti-zmu(ih,ih)*zdrhoh(ih)
     &       -zxi(ih,ih)*rhohs(ih,1,jb)+z0
          z1=rhohs(ih,1,jb)+z1
 2040   continue
c
        zv0flx=z0/(z1+epslon)
        if(lprint) zhydv0(jb)=zv0flx
c
c
        do 2050 ii=1,mimp
          ip=ii+lhydn
          z0=-(zphi(ip)*zdte+zpsi(ip)*zdti+zmu(ip,ip)*zdrhoi(ii))/
     &        (rhois(ii,1,jb)+epslon) - zxi(ip,ip)
          z1=zv0flx
          if(abs(cfutz(i1drag)).le.epslon) z1=z1-z0
c
c  enhanced drag on impurities due to hydrogenic flux
c
          z3=cfutz(i0drag)*z1
          zxi(ip,ip)=-z3+zxi(ip,ip)
          if(lprint) zxdrag(ii,jb)=z3
          zxi(lelec,lelec)=-cmean(ii,1,jb)*z3*rhois(ii,1,jb)+
     &      zxi(lelec,lelec)
          zxi(lion,lion)=-z3*rhois(ii,1,jb)+zxi(lion,lion)
 2050   continue
 2060 continue
c
c  normalization of electron and ion-energy flux densities
c
        zxi(lelec,lelec) = cpvelc*zine*zxi(lelec,lelec)
        zxi(lion,lion)   = cpvion*zini*zxi(lion,lion)
c
c
c     2.6)   convection velocity of toroidal flux surfaces
c
c bateman  magnetic convection
c
c  zvmag = ( d rho / d t) / [ ( d rho / d xi ) * < |del xi| > ]
c          at timestep N+1/2  boundary jb
c
      zunitv = uisl / uist
c
      if (jb .eq. lcentr) then
        zvmag = 0.
      else
        zvmag = avi(jb,1,2) * zunitv / (avi(jb,2,1) * avi(jb,5,1))
      endif
c
      do ip=1,mchi
        zxi(ip,ip) = zxi(ip,ip) + zvmag
      enddo
c
c..convection from neoclassical models
c
      zxi(lion,lion) = zxi(lion,lion) + veltis(jb)
      zxi(lelec,lelec) = zxi(lelec,lelec) + veltes(jb)
c
      do jh=1,mhyd
        zxi(jh,jh) = zxi(jh,jh)  + velnhs(jh,jb)
      enddo
c
      if ( mimp .gt. 0 ) then
        do ji=1,mimp
          ii = ji + lhydn
          zxi(ii,ii) = zxi(ii,ii) + velnis(ji,jb)
        enddo
      endif
c
c..add convective velocities from sbrtn theory
c
      zxi(lion,lion) = zxi(lion,lion) + 1.5 * velthi(1,jb) * zunitv
      zxi(lelec,lelec) = zxi(lelec,lelec)
     &  + 1.5 * velthi(3,jb) * zunitv
c
      do jh=1,mhyd
        zxi(jh,jh) = zxi(jh,jh)  + velthi(2,jb) * zunitv
      enddo
c
      if ( mimp .gt. 0 ) then
        do ji=1,mimp
          ii = ji + lhydn
          zxi(ii,ii) = zxi(ii,ii) + velthi(4,jb) * zunitv
        enddo
      endif
c
cend bateman
c
c
c-----------------------------------------------------------------------
c
c
c
c       3)      convert to aaaa, bbbb, cccc, and dddd
c
c
c bateman  flow biasing 17 July 1985
c
c
c      3.1)    compute boundary parameter  for flow biasing
c
cinput
c
c  cfutz(ifbias=81) is a factor which adjusts the ratio of mesh
c       velocity ( dr/dt ) to convective velocity ( -zxi(ip,ip) ) for
c       use in flow-biasing.  the suggested value is cfutz(ifbias)=4.0
cend
c
      do 302 ip=1,mchi
 302  bound(ip,jb) = 0.5
c
      if (cfutz(81) .gt. epslon) then
c
        zinv0=(dti*uist)/(cfutz(ifbias)/zdr+epslon)
c
        do 304 ip=1,mchi
          zm = zinv0 * abs(zxi(ip,ip))
          zn = min (0.5,zm)
          bound(ip,jb) = 0.5 + sign (zn,zxi(ip,ip))
 304    continue
c
      endif
c
cend bateman
c
c
c     3.2)   compute aaaa and bbbb
c
c
        do 358 js2 = lhyd1, limpn
        do 358 js  = lhyd1, limpn
          aaaa(js,js2,jb) = zxi(js,js2)*(1.0 - bound(js2,jb)) -
     1          zdr*((znu(js,js2) - ze*zphi(js))*azzz(js2,jb-1) +
     2                  zmu(js,js2) - zi*zpsi(js))
          bbbb(js,js2,jb) = zxi(js,js2)*bound(js2,jb) +
     1          zdr*((znu(js,js2) - ze*zphi(js))*azzz(js2,jb) +
     2                  zmu(js,js2) - zi*zpsi(js))
  358   continue
c
        do 368 js  = lhyd1, limpn
          aaaa(js,lelec,jb) = - ze0 * zdr * zphi(js)
          bbbb(js,lelec,jb) =   ze0 * zdr * zphi(js)
          aaaa(js,lion,jb)  = - zi0 * zdr * zpsi(js)
          bbbb(js,lion,jb)  =   zi0 * zdr * zpsi(js)
  368   continue
c
        do 370 js=lhyd1,limpn
          aaaa(lelec,js,jb) =
     &      -zdr*( znu(lelec,js)*azzz(js,jb-1) + zmu(lelec,js) )
     &      +zxi(lelec,js)*(1.0-bound(js,jb))
          bbbb(lelec,js,jb) =
     &      +zdr*( znu(lelec,js)*azzz(js,jb) + zmu(lelec,js) )
     &      +zxi(lelec,js)*bound(js,jb)
          aaaa(lion,js,jb) =
     &      -zdr*( znu(lion,js)*azzz(js,jb) + zmu(lion,js) )
          bbbb(lion,js,jb) =
     &      +zdr*( znu(lion,js)*azzz(js,jb) + zmu(lion,js) )
  370   continue
c
          aaaa(lelec,lelec,jb)
     &      =zxi(lelec,lelec)*(1.0-bound(lelec,jb))-zdr*zphi(lelec)
          bbbb(lelec,lelec,jb)
     &      =zxi(lelec,lelec)*bound(lelec,jb)      +zdr*zphi(lelec)
          aaaa(lelec,lion,jb) = -zdr * zpsi(lelec)
          bbbb(lelec,lion,jb) = +zdr * zpsi(lelec)
          aaaa(lion,lelec,jb) = -zdr * zphi(lion)
          bbbb(lion,lelec,jb) = +zdr * zphi(lion)
          aaaa(lion,lion,jb)
     &      =zxi(lion,lion)*(1.0-bound(lion,jb))   -zdr*zpsi(lion)
          bbbb(lion,lion,jb)
     &      =zxi(lion,lion)*bound(lion,jb)         +zdr*zpsi(lion)
c
c-----------------------------------------------------------------------
c
c..Diagnostics for conduction, convection, and total power flow
c
      zsurfi     = avi(jb,3,1) * avi(jb,5,1)
c
      znorm = zsurfi * usil / usit
c
      condei(jb) = - znorm *
     &  zdr * zphi(lelec) * ( chi(lelec,jb) - chi(lelec,jb-1) )
      condii(jb) = - znorm *
     &  zdr * zpsi(lion)  * ( chi(lion ,jb) - chi(lion ,jb-1) )
c
      cvctei(jb) = - znorm * zxi(lelec,lelec) *
     &  ( bound(lelec,jb) * chi(lelec,jb) +
     &  ( 1.0-bound(lelec,jb) ) * chi(lelec,jb-1) )
      cvctii(jb) = - znorm * zxi(lion ,lion) *
     &  ( bound(lion,jb) * chi(lion,jb) +
     &  ( 1.0-bound(lion,jb) ) * chi(lion,jb-1) )
c
      znorm      = zsurfi * usil * usie / usit
c
      do 374 js=lhyd1,limpn
        condei(jb) = condei(jb) - znorm * zdr * ( znu(lelec,js) *
     &    ( azzz(js,jb) * chi(js,jb) - azzz(js,jb-1) * chi(js,jb-1) )
     &    + zmu(lelec,js) * ( chi(js,jb) - chi(js,jb-1) ) )
        condii(jb) = condii(jb) - znorm * zdr * ( znu(lion,js) *
     &    ( azzz(js,jb) * chi(js,jb) - azzz(js,jb-1) * chi(js,jb-1) )
     &    + zmu(lion,js) * ( chi(js,jb) - chi(js,jb-1) ) )
        cvctei(jb) = cvctei(jb) - znorm * zxi(lelec,js) *
     &    ( bound(js,jb) * chi(js,jb)
     &    + ( 1.0-bound(js,jb) ) * chi(js,jb-1) )
        cvctii(jb) = cvctii(jb) - znorm * zxi(lion ,js) *
     &    ( bound(js,jb) * chi(js,jb)
     &    + ( 1.0-bound(js,jb) ) * chi(js,jb-1) )
 374  continue
c
c-----------------------------------------------------------------------
c
c              4.         now calculate cccc, dddd
c
c                  4.1      cccc terms
c
c
c     recombination
c
         do 415 jh=1,mhyd
           cccc(jh,jh,jb) = -recoms(jh,jb)
  415    continue
c
c     equipartition
c
         zbte = - gamin1 * cnueqs(jb) / rhoels(2,jb)
         zbti = gamin1 * cnueqs(jb) / rhoins(2,jb)
         cccc(lelec,lelec,jb) = zbte
         cccc(lelec,lion,jb) = zbti
         cccc(lion,lelec,jb) = -zbte
         cccc(lion,lion,jb) = -zbti
c
c     addition of divertor loss terms
c
        do 416 js=1,mchi
          cccc(js,js,jb)=cccc(js,js,jb)+scroff(js,jb)
  416   continue
c
c               d(weirs)/d(tes)
c
        zdwdte = 0.0
c
      if (mimp .gt. 0) then
c
        do 418 ji = 1, mimp
          zdwdte = zdwdte + dweirs(ji,jb)
  418   continue
c
      endif
c
        cccc(lelec,lelec,jb) = cccc(lelec,lelec,jb) -
     &                          zdwdte * gamin1 / rhoels(2,jb)
c
c  d(wichxs)/d(tis)
c
        cccc(lion,lion,jb) = cccc(lion,lion,jb) +
     &                          dwicxs(jb) * gamin1 / rhoins(2,jb)
c
c  4.2      dddd terms
c
         zwri = 0.0
c
c   sum over hydrogen species
c
       do 424 jh=1,mhyd
c  ionization and beam sources and charge exchange sink
c  les nov-90  include particle source from d3he fusion reactants
c
         dddd(jh,jb) = shions(jh,jb) + shbems(jh,jb) - shchxs(jh,jb) -
     &             shfus(jh,jb) + shblos(jh,jb)
     &      + shd3fs(jh,jb) + shfuel(jh,jb)
  424  continue
c
c   sum over impurity species
c
c..15.09 Don't add in weirs here if using Impurity Rate Equations
c        code (unless specifying Prad via cfutz(327))
c
       if ( mimp .gt. 0 ) then
         do 426 ji=1,mimp
           if ((natomc.ne.3).or.(cfutz(ifrac).ne.0.0))
     &       zwri = zwri + weirs(ji,jb) - dweirs(ji,jb)*tes(2,jb)
           i001 = ji + lhydn
           dddd(i001,jb) = siions(ji,jb)
     &            + sid3fs(ji,jb) + sifuel(ji,jb)
c   les nov-90
  426    continue
c
c  helium-3 and helium-4 source terms
c  les nov-90  skip for d3he
c
         if ( ihe3.gt.0 .and. cfutz(490) .le. epslon )
     &      dddd(ihe3,jb)=dddd(ihe3,jb)+aoloss(jb)
c
         if ( lalpha.gt.0  .and. cfutz(490) .le. epslon )
     &      dddd(lalpha,jb) = dddd(lalpha,jb) + salfs(jb)
c
      endif
c
c  temperature equations
c     note--weohms is added in solveb and weirs in NONCOR
c
c ............................................................
c . emg  26-apr-89 add weiths to the elec. energy equation   .
c .                as a sink term
c  les  nov-90  add d3he wesyn, wed3fs
c ............................................................
c
         dddd(lelec,jb) =  - webrs(jb) - zwri - wesrs(jb) - weions(jb)
     &               + webems(jb) + wealfs(jb) + weauxs(jb)
     &               + weecrh(jb) + weicrf(jb) - weiths(jb)
     &               - wesyn(jb)  + wed3fs(jb)
c
c ..............................................................
c . emg  25-apr-89 add weiths to the ion energy source term   .
c   les  nov-90  add d3he wid3fs
c ..............................................................
c
         dddd(lion,jb) = (wichxs(jb) - dwicxs(jb)*tis(2,jb)) +
     &          wibems(jb) + wialfs(jb) + wiauxs(jb) + wiions(jb) +
     &          wiecrh(jb) + wiicrf(jb) + weiths(jb)
     &          + wid3fs(jb)
cdoc
c
c bateman  energy source terms due to moving flux surfaces
c
c  energy source term --> energy source term
c  - 2. { (d/dt) (d/dxi) V(xi,t)
c      - (d/dxi) [ (d rho / d t) (d V / d xi) / (d rho / d xi) ] }
c      * Energy / [ 3. * (d V / d xi) ]
c  at timestep N+1/2  zone center jb
c
cend
      if (jb .lt. mzones) then ! note jedge+1 not defined
        zcmprs = 2. * (avi(jb,4,2)
     &   - ( avi(jb+1,1,2) * avi(jb+1,3,1) / avi(jb+1,2,1)
     &       - avi(jb,1,2) * avi(jb,3,1) / avi(jb,2,1) ) / dxzoni(jb))
     &    / ( 3. * avi(jb,4,1) )
      endif
c
      zunits = usit * uisd * uise
      dddd(lelec,jb) = dddd(lelec,jb) - zcmprs * chi(lelec,jb) * zunits
      dddd(lion ,jb) = dddd(lion ,jb) - zcmprs * chi(lion ,jb) * zunits
c
cend bateman 7-apr-85
c
        etai(jb) = eta(2,jb)
c
c-----------------------------------------------------------------------
c              9.           terminate spatial loop
c
  999    continue
c
      if ( lprint ) then
        call rarray(' hyd vel',zhydv0,mzones)
        call raray2('ex idrag',zxdrag,mximp,mimp,mzones)
      endif
c
         return
      end
